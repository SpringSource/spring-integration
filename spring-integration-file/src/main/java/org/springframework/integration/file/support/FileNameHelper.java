/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.integration.file.support;

import java.io.File;
import java.util.regex.Pattern;

import org.springframework.expression.EvaluationContext;
import org.springframework.expression.Expression;
import org.springframework.expression.spel.standard.SpelExpressionParser;

/**
 * Helper class, primarily for managing temporary file names used for both local and
 * remote files, while transferring files, to prevent early access to incomplete files.
 * The root object for the expression evaluation is usually the final file name.
 *
 * @author Gary Russell
 * @since 5.1
 *
 */
public final class FileNameHelper {

	private static final SpelExpressionParser EXPRESSION_PARSER = new SpelExpressionParser();

	private final Expression temporaryFileNameExpression;

	/**
	 * Create an instance using the default expression (file name + ".writing").
	 */
	public FileNameHelper() {
		this("#root + '.writing'");
	}

	/**
	 * Create an instance using the provided expression.
	 * @param expression the expression.
	 */
	public FileNameHelper(String expression) {
		this(EXPRESSION_PARSER.parseExpression(expression));
	}

	/**
	 * Create an instance using the provided expression.
	 * @param expression the expression.
	 */
	public FileNameHelper(Expression expression) {
		this.temporaryFileNameExpression = expression;
	}

	/**
	 * Create an instance where the provided suffix is appended to the file name.
	 * @param suffix the suffix.
	 * @return the helper.
	 */
	public static FileNameHelper defaultForSuffix(String suffix) {
		return new FileNameHelper("#root + '" + suffix + "'");
	}

	/**
	 * Create an instance where the filename is appended to the provided prefix.
	 * @param prefix the prefix.
	 * @return the helper.
	 */
	public static FileNameHelper defaultForPrefix(String prefix) {
		return new FileNameHelper("'" + prefix + "' + #root");
	}

	/**
	 * Create the temporary path from the provided path.
	 * @param path the path.
	 * @return the temporary path.
	 */
	public String toTempFile(String path) {
		return toTempFile(path, null);
	}

	/**
	 * Create the temporary path from the provided path.
	 * @param path the path.
	 * @param context the evaluation context.
	 * @return the temporary path.
	 */
	public String toTempFile(String path, EvaluationContext context) {
		String directory = "";
		String fileName = path;
		if (fileName.contains(File.separator)) {
			int index = path.lastIndexOf(File.separator);
			directory = path.substring(0, index + 1);
			fileName = fileName.substring(index + 1);
		}
		if (context != null) {
			return directory + this.temporaryFileNameExpression.getValue(context, fileName, String.class);
		}
		else {
			return directory + this.temporaryFileNameExpression.getValue(fileName, String.class);
		}
	}

	/**
	 * Create a pattern that will not match temporary file names generated by
	 * this helper.
	 * @param context the evaluation context.
	 * @return the pattern.
	 */
	public Pattern excludeTemporaryMatches(EvaluationContext context) {
		return Pattern.compile("^((?!" + toTempFile(".*", context) + ").)*$");
	}

}
