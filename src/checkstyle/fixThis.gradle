task fixThis << {
	fileTree("${buildDir}/reports/checkstyle").include('*.xml').each { report ->
		def xml = new XmlParser(false, false).parse(report)
		xml.file.each { f ->
			def errors = f.error
			def thisErrors = []
			errors.each { error ->
				if (error.@source == 'com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck') {
					thisErrors.add(error)
				}
			}
			if (thisErrors) {
				def errorInx = 0
				def error = thisErrors[errorInx++]
				def file = new File(f.@name)
				println "Fixing file $file ..."
				boolean headerFixed
				def outSource = ''
				file.eachLine { line, ln ->
					if (!headerFixed) {
						def matcher = line =~ /Copyright (20\d\d)(?:-(20\d\d))?/
						if (matcher.count) {
							def year1 = matcher[0][1]
							if (now != year1) {
								if (now != matcher[0][2]) {
									line = line.replaceFirst(/(20\d\d)(?:-20\d\d)?/, year1 + "-$now")
								}
							}
							headerFixed = true
						}
					}

					if (error && ln == (error.@line as int)) {
						def message = error.@message
						def property = message.substring(message.indexOf('\'') + 1, message.lastIndexOf('\''))
						def thisPrefix = message.substring(message.indexOf('"') + 1, message.lastIndexOf('"'))


						def index = (error.@column as int) - 1
						def chars = line.toCharArray()
						for (int i = 0; i < index; i++) {
							if (chars[i] == '\t') { // tabs before code == 8
								index -= 7;
							}
							else if (chars[i] != ' ') { // tabs after code start are only counted as 1
								break;
							}
						}

						line = line.substring(0, index) + thisPrefix + property + line.substring(index + property.length())

						println "Fixed line $line"

						while (error && ln == (error.@line as int)) {
							error = thisErrors[errorInx++]
						}
					}

					outSource += line + System.lineSeparator()
				}
				file.write(outSource)
				println()
			}
		}
	}
}
