<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="polling-consumer"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Poller (Polling Consumer, Polling Message Source)</title>
    <para>
        When Message Endpoints (Channel Adapters) are connected to channels and
        instantiated, they produce one of the following 2 instances:
    </para>
    <itemizedlist>
        <listitem><ulink url="http://static.springsource.org/spring-integration/api/org/springframework/integration/endpoint/PollingConsumer.html">PollingConsumer</ulink></listitem>
        <listitem><ulink url="http://static.springsource.org/spring-integration/api/org/springframework/integration/endpoint/EventDrivenConsumer.html">EventDrivenConsumer</ulink></listitem>
    </itemizedlist>
    <para>
        The actual implementation depends on which type of channel these Endpoints
        are connected to. A channel adapter connected to a channel that implements
        the <interfacename><ulink url="http://static.springsource.org/spring-integration/api/org/springframework/integration/core/SubscribableChannel.html">org.springframework.integration.core.SubscribableChannel</ulink></interfacename>
        interface will produce an instance of <classname>EventDrivenConsumer</classname>.
        On the other hand, a channel adapter connected to a channel that implements the
        <interfacename><ulink url="http://static.springsource.org/spring-integration/api/org/springframework/integration/core/PollableChannel.html">org.springframework.integration.core.PollableChannel</ulink></interfacename>
        interface (e.g. a QueueChannel) will produce an instance of <classname>PollingConsumer</classname>.
    </para>
    <para>
        Polling Consumers allow Spring Integration components to actively poll for
        Messages, rather than to process Messages in an event-driven manner.
    </para>
    <para>
        They represent a critical cross cutting concern in many
        messaging scenarios. In Spring Integration, Polling Consumers are based
        on the pattern with the same name, which is described in the book
        "Enterprise Integration Patterns" by Gregor Hohpe and Bobby Woolf. You
        can find a description of the pattern on the book's website at:
    </para>
    <itemizedlist>
        <listitem><ulink url="http://www.enterpriseintegrationpatterns.com/PollingConsumer.html">
        http://www.enterpriseintegrationpatterns.com/PollingConsumer.html
        </ulink></listitem>
    </itemizedlist>
    <para>
        Furthermore, in Spring Integration a second variation of the Polling Consumer
        pattern exists. When Inbound Channel Adapters are being used, these adapters
        are often wrapped by a <classname>SourcePollingChannelAdapter</classname>.
        For example, when retrieving messages from a remote FTP Server location,
        the adapter described in <xref linkend="ftp-inbound" />
        is configured with a <emphasis>poller</emphasis> to retrieve messages periodically.
        So, when components are configured with Pollers, the resulting instances are
        of one of the following types:
    </para>
    <itemizedlist>
        <listitem><ulink url="http://static.springsource.org/spring-integration/api/org/springframework/integration/endpoint/PollingConsumer.html">PollingConsumer</ulink></listitem>
        <listitem><ulink url="http://static.springsource.org/spring-integration/api/org/springframework/integration/endpoint/SourcePollingChannelAdapter.html">SourcePollingChannelAdapter</ulink></listitem>
    </itemizedlist>
    <para>
        This means, Pollers are used in both inbound and outbound messaging scenarios.
        Here are some use-cases that illustrate the scenarios in which Pollers are
        used:
    </para>
    <itemizedlist>
        <listitem>Polling certain external systems such as FTP Servers, Databases, Web Services</listitem>
        <listitem>Polling internal (pollable) Message Channels</listitem>
        <listitem>Polling internal services (E.g. repeatedly execute methods on a Java class)</listitem>
    </itemizedlist>
    <note>
        AOP Advice classes can be applied to pollers, in an <code>advice-chain</code>. An example being a
        transaction advice to start a transaction. Starting with <emphasis>version 4.1</emphasis> a
        <classname>PollSkipAdvice</classname> is provided. Pollers use triggers to determine the time
        of the next poll. The <classname>PollSkipAdvice</classname> can be used to suppress (skip) a
        poll, perhaps because there is some downstream condition that would prevent the message to
        be processed properly. To use this advice, you have to provide it with an implementation
        of a <interfacename>PollSkipStrategy</interfacename>. <emphasis>Version 4.2</emphasis> added
        more flexibility in this area - see <xref linkend="conditional-pollers"/>.
    </note>
    <para>
        This chapter is meant to only give a high-level overview regarding Polling Consumers
        and how they fit into the concept of message channels - <xref linkend="channel"/> and
        channel adapters -
        <xref linkend="channel-adapter"/>. For more in-depth information regarding
        Messaging Endpoints in general and Polling Consumers in particular, please see
        <xref linkend="endpoint"/>.
    </para>
    <section id="conditional-pollers">
       <title>Conditional Pollers</title>
       <para><emphasis role="bold">Background</emphasis></para>
       <para>
         <interfacename>Advice</interfacename> objects, in an <code>advice-chain</code> on a poller, advise
         the whole polling task (message retrieval and processing). These "around advice" objects do not
         have access to any context for the poll, just the poll itself. This is fine for requirements
         such as making a task transactional, or skipping a poll due to some external condition
         as discussed above. What if we wish to take some action depending on
         the result of the <code>receive</code> part of the poll, or if we want to adjust the poller
         depending on conditions?
       </para>
       <para><emphasis role="bold">"Smart" Polling</emphasis></para>
       <para>
         <emphasis>Version 4.2</emphasis> introduced the <classname>AbstractMessageSourceAdvice</classname>.
         Any <interfacename>Advice</interfacename> objects in the <code>advice-chain</code> that
         subclass this class, are applied to just the receive operation. Such classes implement the
         following methods:
       </para>
       <programlisting language="java"><![CDATA[boolean beforeReceive(MessageSource<?> source)]]></programlisting>
       <para>
         This method is called before the <interfacename>MessageSource</interfacename> <code>receive()</code>
         method. It enables you to examine and or reconfigure the source at this time. Returning
         false cancels this poll (similar to the <classname>PollSkipAdvice</classname> above).
       </para>
       <programlisting language="java"><![CDATA[
Message<?> afterReceive(Message<?> result, MessageSource<?> source)]]></programlisting>
       <para>
         This method is called after the <code>receive()</code> method; again, you can reconfigure the
         source, or take any action perhaps depending on the result (<code>null</code> for no message).
         You can even return a different message!
       </para>
       <para><emphasis role="bold">SimpleActiveIdleMessageSourceAdvice</emphasis></para>
       <para>
         This advice is a simple implementation of <classname>AbstractMessageSourceAdvice</classname>,
         when used in conjuction with a <classname>DynamicPeriodicTrigger</classname> it adjusts
         the polling frequency depending on whether or not the previous poll resulted in a
         message or not. The poller must also have a reference to the same
         <classname>DynamicPeriodicTrigger</classname>.
       </para>
       <important>
         This advice modifies the trigger based on the receive result. This will only work if the
         advice is called on the poller thread. It will <emphasis role="bold">not</emphasis>
         work if the poller has a <code>task-exector</code>. To use this advice where you wish to
         use asynch operations after the result of a poll, do the async handoff later, perhaps
         by using an <classname>ExceutorChannel</classname>.
       </important>
       <para><emphasis role="bold">Advice Chain Ordering</emphasis></para>
       <important>
        <para>
         It is important to understamd how the advice chain is processed during initialization.
         <interface>Advice</interface> objects that do not extend <classname>AbstractMessageSourceAdvice</classname>
         are applied to the whole poll process and are all invoked first, in order, before any
         <classname>AbstractMessageSourceAdvice</classname>; then <classname>AbstractMessageSourceAdvice</classname>
         objects are invoked in order around the <interfacename>MessageSource</interfacename> <code>receive()</code>
         method. If you have, say <interfacename>Advice</interfacename> objects <code>a, b, c, d</code>, where
         <code>b</code> and <code>d</code> are <classname>AbstractMessageSourceAdvice</classname>, they will be
         applied in the order <code>a, c, b, d</code>.
        </para>
        <para>
         Also, if a <interfacename>MessageSource</interfacename> is already a <interfacename>Proxy</interfacename>,
         the <classname>AbstractMessageSourceAdvice</classname> will be invoked after any existing
         <interfacename>Advice</interfacename> objects. If you wish to change the order, you should wire
         up the proxy yourself.
        </para>
       </important>
    </section>

</section>
